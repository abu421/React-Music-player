{"version":3,"sources":["components/Player.js","components/Song.js","components/LibrarySong.js","components/Library.js","components/Nav.js","data.js","App.js","reportWebVitals.js","index.js"],"names":["Player","setIsPlaying","isPlaying","currentSong","audioRef","setSongInfo","songInfo","songs","setCurrentSong","setSongs","activeLibraryHandler","nextPrev","newSongs","map","song","id","active","getTime","time","Math","floor","slice","skipTrackHandler","direction","a","currentIndex","findIndex","length","current","play","className","currentTime","min","max","duration","value","onChange","e","target","type","onClick","icon","faAngleLeft","size","pause","faPause","faPlay","faAngleRight","Song","src","cover","alt","name","artist","LibrarySong","songSelectHandler","selectedSong","filter","state","Library","libraryStatus","Nav","setLibraryStatus","faMusic","chillHop","uuidv4","color","audio","App","useRef","useState","data","timeUpdateHandler","songEndHandler","onTimeUpdate","onLoadedMetadata","ref","onEnded","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d8381756.chunk.js","sourcesContent":["// controls for our music player\r\n// song name artist picture\r\nimport React from \"react\";\r\n// import { playAudio } from '../util';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlay, faAngleLeft, faAngleRight, faPause } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Player = ({ setIsPlaying, isPlaying, currentSong, audioRef, setSongInfo, songInfo, songs, setCurrentSong, setSongs }) => {\r\n\r\n    // Ref -- to access html tags in React\r\n    \r\n\r\n    //States\r\n    \r\n    //UseEffect\r\n    // useEffect(() => {\r\n        \r\n    // }, [currentSong]);\r\n\r\n    const activeLibraryHandler = (nextPrev) => {\r\n        const newSongs = songs.map(song => {\r\n            if(song.id === nextPrev.id){\r\n                return {\r\n                    ...song,\r\n                    active: true,\r\n                }\r\n            }\r\n            else{\r\n                return{\r\n                    ...song,\r\n                    active: false,\r\n                }\r\n            }\r\n        });\r\n        setSongs(newSongs);\r\n    }\r\n\r\n    // Event Handlers\r\n    const playSongHandler = () => { //play pause\r\n        if(isPlaying){\r\n            audioRef.current.pause();\r\n            setIsPlaying(!isPlaying);\r\n        }\r\n        else{\r\n            audioRef.current.play();\r\n            setIsPlaying(!isPlaying);\r\n        }\r\n    };\r\n\r\n    \r\n\r\n    const getTime = (time) => { // format time in second\r\n        return (\r\n            Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2)\r\n        );\r\n    }\r\n\r\n    const dragHandler = (e) => { // fastforward or backward\r\n        audioRef.current.currentTime = e.target.value;\r\n        setSongInfo({...songInfo, currentTime: e.target.value});\r\n    }\r\n\r\n    const skipTrackHandler = async (direction) => {\r\n        let currentIndex = songs.findIndex((song) => song.id === currentSong.id);\r\n        if(direction === 'skip-forward'){\r\n            await setCurrentSong(songs[(currentIndex + 1) % songs.length]);\r\n            activeLibraryHandler(songs[(currentIndex + 1) % songs.length]);\r\n        }\r\n        if(direction === 'skip-back'){\r\n            if((currentIndex - 1) % songs.length === -1){\r\n                await setCurrentSong(songs[songs.length - 1]);\r\n                activeLibraryHandler(songs[songs.length - 1]);\r\n                if(isPlaying) audioRef.current.play();\r\n                return;\r\n            }\r\n            await setCurrentSong(songs[(currentIndex - 1) % songs.length]);\r\n            activeLibraryHandler(songs[(currentIndex - 1) % songs.length]);\r\n        }\r\n        if(isPlaying) audioRef.current.play();\r\n    };\r\n\r\n    // JSX\r\n    return(\r\n            <div className=\"player\">\r\n                <div className=\"time-control\">\r\n                    <p>{getTime(songInfo.currentTime)}</p>\r\n                    <input min={0} max={songInfo.duration || 0} value={songInfo.currentTime} onChange={dragHandler} type=\"range\" />\r\n                    <p>{songInfo.duration ? getTime(songInfo.duration) : \"0:00\" }</p>\r\n                </div>\r\n                <div className=\"play-control\">\r\n                    <FontAwesomeIcon onClick={() => skipTrackHandler(\"skip-back\")} className=\"skip-back\" icon={faAngleLeft} size=\"2x\" />\r\n                    <FontAwesomeIcon onClick={playSongHandler} className=\"play\" icon={isPlaying? faPause : faPlay} size=\"2x\" />\r\n                    <FontAwesomeIcon onClick={() => skipTrackHandler(\"skip-forward\")} className=\"skip-forward\" icon={faAngleRight} size=\"2x\" />\r\n                </div>\r\n            </div>\r\n        );\r\n    \r\n}\r\n\r\nexport default Player;","// song name artist picture\r\nimport React from \"react\";\r\n\r\nconst Song = ({currentSong}) => {\r\n\r\n    return(\r\n            <div className=\"song-container\">\r\n                <img src={currentSong.cover} alt=\"Cover\"></img>\r\n                <h2>{currentSong.name}</h2>\r\n                <h3>{currentSong.artist}</h3>\r\n            </div>\r\n        );\r\n    \r\n};\r\n\r\nexport default Song;","// song name artist picture\r\nimport React from \"react\";\r\n// import { playAudio } from '../util';\r\n\r\nconst LibrarySong = ({songs, song, setCurrentSong, id, audioRef, isPlaying, setSongs }) => {\r\n\r\n\r\n    const songSelectHandler = async () => {\r\n        const selectedSong = songs.filter((state) => state.id === id);\r\n        await setCurrentSong(selectedSong[0]);\r\n\r\n        // add active state\r\n        const newSongs = songs.map(song => {\r\n            if(song.id === id)\r\n            {\r\n                return {\r\n                    ...song, \r\n                    active: true,\r\n                }\r\n            }\r\n            else{\r\n                return {\r\n                    ...song, \r\n                    active: false,\r\n                }\r\n            }\r\n        });\r\n        setSongs(newSongs);\r\n\r\n        // check if song is playing\r\n        if(isPlaying) audioRef.current.play();\r\n    }\r\n\r\n    return(\r\n            <div onClick={songSelectHandler} className={`library-song ${song.active ? 'selected' : \"\"}`}>\r\n                <img src={song.cover} alt=\"Cover\"></img>\r\n                <div className=\"song-description\">\r\n                <h3>{song.name}</h3>\r\n                <h4>{song.artist}</h4>\r\n                </div>\r\n            </div>\r\n        );\r\n    \r\n};\r\n\r\nexport default LibrarySong;","import React from 'react';\r\nimport LibrarySong from './LibrarySong';\r\n\r\nconst Library = ({songs, setCurrentSong, audioRef, isPlaying, setSongs, libraryStatus }) => {\r\n    return(\r\n        <div className={ `library ${libraryStatus ? 'active-library' : ''}` }>\r\n            <h2>Library</h2>\r\n            <div className=\"library-songs\">\r\n                {songs.map(song => <LibrarySong songs={songs} song={song} setCurrentSong={setCurrentSong} id={song.id} key={song.id} audioRef={audioRef} isPlaying={isPlaying} setSongs={setSongs} />)}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Library;","import React from 'react';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faMusic } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Nav = ({ libraryStatus, setLibraryStatus }) => {\r\n    return(\r\n        <nav>\r\n            <h1>Waves</h1>\r\n            <button onClick={() => setLibraryStatus(!libraryStatus)}  >\r\n                Library\r\n                <FontAwesomeIcon icon={faMusic} /*onMouseEnter={() => setLibraryStatus(!libraryStatus)} onMouseLeave={() => setLibraryStatus(!libraryStatus)}*//>\r\n            </button>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Nav;","import { v4 as uuidv4 } from \"uuid\";\r\n\r\nfunction chillHop() {\r\n    return [\r\n        {\r\n            name: \"Kattegat\",\r\n            artist: \"Ragnar Lothbrok\",\r\n            cover: \"https://images.hdqwalls.com/download/vikings-ragnar-4k-92-1080x1920.jpg\",\r\n            id: uuidv4(),\r\n            active: true,\r\n            color: ['red', 'blue'],\r\n            audio: \"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-15.mp3\"\r\n        },\r\n        {\r\n            name: \"Scandinavia\",\r\n            artist: \"Lagertha\",\r\n            cover: \"https://images.hdqwalls.com/download/vikings-season-4-1080x1920.jpg\",\r\n            id: uuidv4(),\r\n            active: false,\r\n            color: ['red', 'blue'],\r\n            audio: \"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-16.mp3\"\r\n        },\r\n        {\r\n            name: \"Iceland\",\r\n            artist: \"Bjorn Ironside\",\r\n            cover: \"https://images.hdqwalls.com/download/vikings-2021-6l-1080x1920.jpg\",\r\n            id: uuidv4(),\r\n            active: false,\r\n            color: ['red', 'blue'],\r\n            audio: \"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-13.mp3\"\r\n        },\r\n        {\r\n            name: \"Kiev\",\r\n            artist: \"Maiden\",\r\n            cover: \"https://images.hdqwalls.com/download/porunn-vikings-4k-xw-1080x1920.jpg\",\r\n            id: uuidv4(),\r\n            active: false,\r\n            color: ['red', 'blue'],\r\n            audio: \"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-9.mp3\"\r\n        },\r\n        {\r\n            name: \"Greenland\",\r\n            artist: \"Ubbe\",\r\n            cover: \"https://images.hdqwalls.com/download/vikings-season-5-4k-d8-1080x1920.jpg\",\r\n            id: uuidv4(),\r\n            active: false,\r\n            color: ['red', 'blue'],\r\n            audio: \"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-11.mp3\"\r\n        }\r\n    ];\r\n};\r\n\r\nexport default chillHop;","import React, { useState, useRef } from \"react\";\nimport Player from './components/Player';\nimport Song from \"./components/Song\";\nimport Library from \"./components/Library\";\nimport Nav from './components/Nav';\nimport './styles/app.scss';\nimport data from './data';\n\nfunction App() {\n\n  //Ref\n  const audioRef = useRef(null);\n\n  //State\n  const [songs, setSongs] = useState(data());\n  const [currentSong, setCurrentSong] = useState(songs[0]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duration: 0,\n});\nconst [libraryStatus, setLibraryStatus] = useState(false);\nconst timeUpdateHandler = (e) => { // time played / duration of song\n  const current = e.target.currentTime;\n  const duration = e.target.duration;\n  setSongInfo({...songInfo, currentTime: current, duration: duration});\n};\nconst songEndHandler = async () => {\n  let currentIndex = songs.findIndex((song) => song.id === currentSong.id);\n  await setCurrentSong(songs[(currentIndex + 1) % songs.length]);\n  if(isPlaying) audioRef.current.play();\n        \n}\n  \n  return (\n    <div className={`App ${libraryStatus ? \"library-active\" : \"\" }`}>\n      <Nav libraryStatus={libraryStatus} setLibraryStatus={setLibraryStatus} />\n      <Song currentSong={currentSong} />\n      <Player setIsPlaying={setIsPlaying} isPlaying={isPlaying} currentSong={currentSong} audioRef={audioRef} setSongInfo={setSongInfo} songInfo={songInfo} songs={songs} setCurrentSong={setCurrentSong} setSongs={setSongs} />\n      <Library songs={songs} setCurrentSong={setCurrentSong} audioRef={audioRef} isPlaying={isPlaying} setSongs={setSongs} libraryStatus={libraryStatus} />\n      <audio onTimeUpdate={timeUpdateHandler} onLoadedMetadata={timeUpdateHandler} ref={audioRef} src={currentSong.audio} onEnded={songEndHandler} ></audio>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}